__title__ = "laser cut box"
__author__ = "Greg Harley"
__version__ = "01.00"
__date__ = "12/31/20"

__Comment__ = "This macro creates a sketch of a laser cut box which can then be save to a DXF file."

from PySide import QtCore, QtGui
from FreeCAD import Gui
import Part, Sketcher

App = FreeCAD


class Box:
    def __init__(self):
        if not App.ActiveDocument:
            App.newDocument()

        self.dialog = None
        self.worksheet = None
        self.box_type = 0

        self.init_dialog()

        self.dialog.show()
        self.dialog.exec_()

    def init_dialog(self):
        self.dialog = Gui.PySideUic.loadUi("C:/Users/gharley/AppData/Roaming/FreeCAD/Macro/Macro_LaserCutBox.ui")
        self.dialog.setWindowTitle("Laser cut box")

        QtCore.QObject.connect(self.dialog.buttonBox, QtCore.SIGNAL("accepted()"), self.init_sheet)

    def init_sheet(self):
        self.worksheet = App.ActiveDocument.addObject("Spreadsheet::Sheet", "Parameters")
        set_cell = self.worksheet.set
        self.worksheet.setColumnWidth('A', 150)

        index = 0
        for obj in self.dialog.findChildren(QtGui.QLabel):
            index += 1
            column_a = 'A' + str(index)
            column_b = 'B' + str(index)

            alias = obj.buddy()
            if not (alias is None):
                if isinstance(alias, QtGui.QComboBox):
                    self.box_type = alias.currentIndex
                    index -= 1
                else:
                    set_cell(column_a, obj.text())
                    set_cell(column_b, alias.text())
                    self.worksheet.setAlias(column_b, alias.objectName())
            else:
                self.worksheet.setStyle(column_a, 'bold')
                self.worksheet.setAlignment(column_a, 'center|vcenter')
                self.worksheet.mergeCells(column_a + ':' + column_b)
                set_cell(column_a, obj.text())

        App.ActiveDocument.recompute(None, True, True)

        self.build_long_side()

    def build_long_side(self):
        sheet = self.worksheet
        sheet_name = App.ActiveDocument.ActiveObject.Name

        width = sheet.get(sheet.getCellFromAlias("width"))
        height = sheet.get(sheet.getCellFromAlias("height"))

        sketch = App.ActiveDocument.addObject("Sketcher::SketchObject", "Sketch")
        sketch.addGeometry(Part.LineSegment(App.Vector(0, 0, 0), App.Vector(width, 0, 0)), False)
        cnum = sketch.addConstraint(Sketcher.Constraint('DistanceX', 0, width))
        sketch.setExpression("Constraints[" + str(cnum) + "]", "<<" + sheet_name + ">>.width")
        sketch.addConstraint(Sketcher.Constraint('Horizontal', 0))

        sketch.addGeometry(Part.LineSegment(App.Vector(width, 0, 0), App.Vector(width, height, 0)), False)
        cnum = sketch.addConstraint(Sketcher.Constraint('DistanceY', 1, height))
        sketch.setExpression("Constraints[" + str(cnum) + "]", "<<" + sheet_name + ">>.height")
        sketch.addConstraint(Sketcher.Constraint('Vertical', 1))
        sketch.addConstraint(Sketcher.Constraint('Coincident', 0, 2, 1, 1))

        sketch.addGeometry(Part.LineSegment(App.Vector(width, height, 0), App.Vector(0, height, 0)), False)
        sketch.addConstraint(Sketcher.Constraint('Equal', 0, 2))
        sketch.addConstraint(Sketcher.Constraint('Coincident', 1, 2, 2, 1))

        sketch.addGeometry(Part.LineSegment(App.Vector(0, height, 0), App.Vector(0, 0, 0)), False)
        sketch.addConstraint(Sketcher.Constraint('Equal', 1, 3))
        sketch.addConstraint(Sketcher.Constraint('Coincident', 2, 2, 3, 1))
        sketch.addConstraint(Sketcher.Constraint('Coincident', 3, 2, 0, 1))
        sketch.addConstraint(Sketcher.Constraint('Symmetric', 0, 1, 2, 1, -1, 1))

        App.ActiveDocument.recompute(None, True, True)
        Gui.ActiveDocument.ActiveView.fitAll()


Box()
