__title__ = "laser cut box"
__author__ = "Greg Harley"
__version__ = "01.00"
__date__ = "12/31/20"

__Comment__ = "This macro creates a sketch of a laser cut box which can then be save to a DXF file."

from math import floor

from PySide import QtCore, QtGui
from FreeCAD import Gui
import Part, Sketcher

App = FreeCAD

# Indexes for geoid
START = 1
END = 2
ORIGIN = -1

# Indexes for box sides
TOP = 0
RIGHT = 1
BOTTOM = 2
LEFT = 3


class Box:
    def __init__(self):
        if not App.ActiveDocument:
            App.newDocument()

        self.dialog = None
        self.worksheet = None
        self.box_type = 0

        self.init_dialog()

        self.dialog.show()
        self.dialog.exec_()

    def init_dialog(self):
        self.dialog = Gui.PySideUic.loadUi("C:/Users/gharley/AppData/Roaming/FreeCAD/Macro/Macro_LaserCutBox.ui")
        self.dialog.setWindowTitle("Laser cut box")

        QtCore.QObject.connect(self.dialog.buttonBox, QtCore.SIGNAL("accepted()"), self.init_sheet)

    def init_sheet(self):
        self.worksheet = App.ActiveDocument.addObject("Spreadsheet::Sheet", "Parameters")
        set_cell = self.worksheet.set

        def column_a(idx):
            return 'A' + str(idx)

        def column_b(idx):
            return 'B' + str(idx)

        self.worksheet.setColumnWidth('A', 150)

        index = 0
        for obj in self.dialog.findChildren(QtGui.QLabel):
            index += 1
            col_a = column_a(index)
            col_b = column_b(index)

            alias = obj.buddy()
            if not (alias is None):
                if isinstance(alias, QtGui.QComboBox):
                    self.box_type = alias.currentIndex
                    index -= 1
                else:
                    set_cell(col_a, obj.text())
                    set_cell(col_b, alias.text())
                    self.worksheet.setAlias(col_b, alias.objectName())
            else:
                self.worksheet.setStyle(col_a, 'bold')
                self.worksheet.setAlignment(col_a, 'center|vcenter')
                self.worksheet.mergeCells(col_a + ':' + col_b)
                set_cell(col_a, obj.text())

        index += 1
        col_a = column_a(index)
        self.worksheet.setStyle(col_a, 'bold')
        self.worksheet.setAlignment(col_a, 'center|vcenter')
        self.worksheet.mergeCells(col_a + ':' + column_b(index))
        set_cell(col_a, 'Calculated Values DO NOT EDIT')

        def set_calc(index, label, alias, formula):
            col_a = column_a(index)
            col_b = column_b(index)
            set_cell(col_a, label)
            set_cell(col_b, formula)
            self.worksheet.setAlias(col_b, alias)

        index += 1
        set_calc(index, 'Side tab gap', 'sideGap',
                 '=(width - offsetH * 2 - tabWidth * numTabsLength) / (numTabsLength - 1)')

        index += 1
        set_calc(index, 'End tab gap', 'endGap',
                 '=(depth - offsetH * 2 - tabWidth * numTabsDepth) / (numTabsDepth - 1)')

        index += 1
        set_calc(index, 'Height tab gap', 'heightGap',
                 '=(height - offsetV * 2 - tabWidth * numTabsHeight) / (numTabsHeight - 1)')

        App.ActiveDocument.recompute(None, True, True)

        self.build_side()

    def build_side(self):
        sheet = self.worksheet
        sheet_prefix = '<<' + self.worksheet.Name + '>>.'

        sketch = App.ActiveDocument.addObject('Sketcher::SketchObject', 'BoxSide')
        width = sheet.get(sheet.getCellFromAlias('width'))
        height = sheet.get(sheet.getCellFromAlias('height'))
        tab_width = sheet.get(sheet.getCellFromAlias('tabWidth'))
        thickness = sheet.get(sheet.getCellFromAlias('thickness'))
        offset = sheet.get(sheet.getCellFromAlias('offsetH'))
        num_tabs = floor(sheet.get(sheet.getCellFromAlias('numTabsLength')))
        gap = sheet.get(sheet.getCellFromAlias('sideGap'))

        box = self.draw_box(sketch, width, height + thickness * 2, '{0}width'.format(sheet_prefix), '{0}height + {1}thickness * 2'.format(sheet_prefix, sheet_prefix))
        sketch.addConstraint(Sketcher.Constraint('Symmetric', box[TOP], START, box[BOTTOM], START, ORIGIN, START))

        tabs = self.draw_tabs(sketch, num_tabs, tab_width, thickness, gap, '{0}tabWidth'.format(sheet_prefix), '{0}thickness'.format(sheet_prefix), '{0}sideGap * {1} + {0}tabWidth * ({1} - 1)'.format(sheet_prefix, '{0}'))
        tab = tabs[0]
        constraint = sketch.addConstraint(Sketcher.Constraint('DistanceX', box[TOP], START, tab[TOP], START, offset))
        sketch.setExpression("Constraints[{0}]".format(str(constraint)), '{0}offsetH'.format(sheet_prefix))

        constraint = sketch.addConstraint(Sketcher.Constraint('DistanceY', tab[TOP], START, box[TOP], START, thickness))
        sketch.setExpression("Constraints[{0}]".format(str(constraint)), '{0}thickness'.format(sheet_prefix))

        tabs = self.draw_tabs(sketch, num_tabs, tab_width, thickness, gap, '{0}tabWidth'.format(sheet_prefix), '{0}thickness'.format(sheet_prefix), '{0}sideGap * {1} + {0}tabWidth * ({1} - 1)'.format(sheet_prefix, '{0}'))
        tab = tabs[0]
        constraint = sketch.addConstraint(Sketcher.Constraint('DistanceX', box[TOP], START, tab[TOP], START, offset))
        sketch.setExpression("Constraints[{0}]".format(str(constraint)), '{0}offsetH'.format(sheet_prefix))

        constraint = sketch.addConstraint(
            Sketcher.Constraint('DistanceY', box[BOTTOM], START, tab[TOP], START, thickness))
        sketch.setExpression("Constraints[{0}]".format(str(constraint)), '{0}thickness'.format(sheet_prefix))

        App.ActiveDocument.recompute(None, True, True)
        Gui.ActiveDocument.ActiveView.fitAll()

    def draw_box(self, sketch, width, height, expression_h, expression_v):
        lower_left, upper_left, lower_right, upper_right = self.get_vectors(width, height)

        top = sketch.addGeometry(Part.LineSegment(upper_left, upper_right), False)
        right = sketch.addGeometry(Part.LineSegment(upper_right, lower_right), False)
        bottom = sketch.addGeometry(Part.LineSegment(lower_right, lower_left), False)
        left = sketch.addGeometry(Part.LineSegment(lower_left, upper_left), False)

        sketch.addConstraint(Sketcher.Constraint('Horizontal', top))
        sketch.addConstraint(Sketcher.Constraint('Horizontal', bottom))
        sketch.addConstraint(Sketcher.Constraint('Vertical', left))
        sketch.addConstraint(Sketcher.Constraint('Vertical', right))

        sketch.addConstraint(Sketcher.Constraint('Coincident', top, END, right, START))
        sketch.addConstraint(Sketcher.Constraint('Coincident', right, END, bottom, START))
        sketch.addConstraint(Sketcher.Constraint('Coincident', bottom, END, left, START))
        sketch.addConstraint(Sketcher.Constraint('Coincident', left, END, top, START))

        constraint = sketch.addConstraint(Sketcher.Constraint('DistanceX', top, width))
        sketch.setExpression("Constraints[{0}]".format(str(constraint)), expression_h)

        constraint = sketch.addConstraint(Sketcher.Constraint('DistanceY', left, height))
        sketch.setExpression("Constraints[{0}]".format(str(constraint)), expression_v)

        return [top, right, bottom, left]

    def draw_tabs(self, sketch, num_tabs, tab_width, thickness, gap, expression_width, expression_thickness, expression_gap):
        tabs = []
        for idx in range(0, num_tabs):
            tab = self.draw_box(sketch, tab_width, thickness, expression_width, expression_thickness)
            tabs.append(tab)

            if idx == 0:
                first = tab
            else:
                constraint = sketch.addConstraint(Sketcher.Constraint('DistanceX', first[TOP], END, tab[TOP], START, gap * idx + tab_width * (idx - 1)))
                sketch.setExpression("Constraints[{0}]".format(str(constraint)), expression_gap.format(idx))

                sketch.addConstraint(Sketcher.Constraint('DistanceY', first[TOP], END, tab[TOP], START, 0))

        return tabs

    @staticmethod
    def get_vectors(width, height):
        lower_left = App.Vector(0, 0, 0)
        upper_left = App.Vector(0, height, 0)
        lower_right = App.Vector(width, 0, 0)
        upper_right = App.Vector(width, height, 0)

        return lower_left, upper_left, lower_right, upper_right


Box()
